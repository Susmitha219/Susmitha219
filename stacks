Write a program to convert the Infix notation to postfix notation using stack.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the maximum size of the stack
#define MAX_STACK_SIZE 100

// Function to check if a character is an operator (+, -, *, /, ^)
int isOperator(char ch) {
return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

// Function to determine the precedence of an operator
int precedence(char ch) {
if (ch == '^')
return 3;
else if (ch == '*' || ch == '/')
return 2;
else if (ch == '+' || ch == '-')
return 1;
else
return 0; // Lower precedence for non-operators
}

// Function to convert infix expression to postfix
void infixToPostfix(char infix[], char postfix[]) {
char stack[MAX_STACK_SIZE];
int top = -1; // Initialize stack top to -1

int i, j = 0;

for (i = 0; infix[i] != '\0'; i++) {
char ch = infix[i];

if (isalnum(ch)) {
postfix[j++] = ch; // If character is operand, add to postfix
} else if (ch == '(') {
stack[++top] = ch; // Push opening parenthesis onto stack
} else if (ch == ')') {
while (top >= 0 && stack[top] != '(') {
postfix[j++] = stack[top--]; // Pop operators until '(' is found
}
if (top >= 0 && stack[top] == '(') {
top--; // Pop the '('
}
} else {
// Character is an operator
while (top >= 0 && precedence(stack[top]) >= precedence(ch)) {
postfix[j++] = stack[top--]; // Pop higher or equal precedence operators
}
stack[++top] = ch; // Push the current operator onto stack
}
}

// Pop any remaining operators from the stack and add to postfix
while (top >= 0) {
postfix[j++] = stack[top--];
}

postfix[j] = '\0'; // Null-terminate the postfix expression
}

int main() {
char infix[MAX_STACK_SIZE];
char postfix[MAX_STACK_SIZE];

printf("Enter an infix expression: ");
gets(infix); // Input infix expression (without spaces)

infixToPostfix(infix, postfix);

printf("Postfix expression: %s\n", postfix);

return 0;
}
Write a program to evaluate the postfix notation using stack
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// Define the maximum size of the stack
#define MAX_STACK_SIZE 100

// Define a stack structure
struct Stack {
int top;
int data[MAX_STACK_SIZE];

};

// Function to initialize an empty stack
void initialize(struct Stack *stack) {
stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *stack) {
return stack->top == -1;
}

// Function to push an element onto the stack
void push(struct Stack *stack, int value) {
if (stack->top == MAX_STACK_SIZE - 1) {
printf("Stack Overflow\n");
exit(1); // Exit the program in case of stack overflow
}
stack->data[++(stack->top)] = value;
}

// Function to pop an element from the stack
int pop(struct Stack *stack) {
if (isEmpty(stack)) {
printf("Stack Underflow\n");
exit(1); // Exit the program in case of stack underflow
}
return stack->data[(stack->top)--];

}

// Function to evaluate a postfix expression
int evaluatePostfix(char postfix[]) {
struct Stack stack;
initialize(&stack);

int i, operand1, operand2;

for (i = 0; postfix[i] != '\0'; i++) {
char ch = postfix[i];

if (isdigit(ch)) {
push(&stack, ch - '0'); // Convert character digit to integer and push onto stack
} else {
operand2 = pop(&stack);
operand1 = pop(&stack);

switch (ch) {
case '+':
push(&stack, operand1 + operand2);
break;
case '-':
push(&stack, operand1 - operand2);
break;
case '*':
push(&stack, operand1 * operand2);
break;

case '/':
if (operand2 != 0) {
push(&stack, operand1 / operand2);
} else {
printf("Division by zero\n");
exit(1); // Exit the program for division by zero
}
break;
default:
printf("Invalid operator in postfix expression\n");
exit(1); // Exit the program for invalid operator
}
}
}

if (!isEmpty(&stack)) {
return pop(&stack);
} else {
printf("Postfix expression is empty\n");
exit(1); // Exit the program for an empty postfix expression
}
}

int main() {
char postfix[MAX_STACK_SIZE];

printf("Enter a postfix expression: ");
gets(postfix); // Input postfix expression (without spaces)

int result = evaluatePostfix(postfix);

printf("Result: %d\n", result);

return 0;
}
