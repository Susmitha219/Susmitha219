1. ADD TWO VERY LARGE NUMBERS USING LINKED LIST
#include<stdio.h>
#include <stdlib.h>

struct Node {
int data;
struct Node* next;
};

// Function to create a new node
struct Node* newNode(int data) {
struct Node* node = (struct Node*) malloc(sizeof(struct Node));
node->data = data;
node->next = NULL;
return node;
}

// Function to display a linked list
void displayList(struct Node* head) {
while (head) {
printf("%d ", head->data);
head = head->next;
}
printf("\n");
}

// Function to add two linked lists
struct Node* add_Lists(struct Node* list1, struct Node* list2) {

struct Node* res = NULL;
struct Node* temp, * prev = NULL;
int carry = 0, sum;

while (list1 != NULL || list2 != NULL) {
sum = carry + (list1 ? list1->data : 0) + (list2 ? list2->data : 0);

carry = (sum >= 10) ? 1 : 0;
sum = sum % 10;

temp = newNode(sum);

if (res == NULL)
res = temp;
else
prev->next = temp;

prev = temp;

if (list1) list1 = list1->next;
if (list2) list2 = list2->next;
}

if (carry > 0)
temp->next = newNode(carry);

return res;
}

int main() {
struct Node* list1 = newNode(8);
list1->next = newNode(7);
list1->next->next = newNode(9);
list1->next->next->next = newNode(2);
printf("List-1\n");
displayList(list1);
struct Node* list2 = newNode(2);
list2->next = newNode(1);
list2->next->next = newNode(2);
list2->next->next->next = newNode(3);
printf("List-2\n");
displayList(list2);
struct Node* result = add_Lists(list1, list2);
printf("\nAdding said two lists:\n");
displayList(result);
return 0;
}
1.ADDITION OF TWO POLYNOMIALS USING LINKED LIST
#include <stdio.h>
#include <stdlib.h>

// Define the structure for a term in a polynomial
typedef struct Term {
int coefficient;
int exponent;
struct Term* next;
} Term;

// Function to create a new term
Term* createTerm(int coef, int exp) {
Term* term = (Term*)malloc(sizeof(Term));
term->coefficient = coef;
term->exponent = exp;
term->next = NULL;
return term;
}

// Function to add a term to a polynomial
void addToPolynomial(Term** poly, int coef, int exp) {
Term* newTerm = createTerm(coef, exp);

if (*poly == NULL) {
*poly = newTerm;
return;
}

Term* current = *poly;
while (current->next != NULL) {
current = current->next;
}
current->next = newTerm;
}

// Function to add two polynomials
Term* addPolynomials(Term* poly1, Term* poly2) {
Term* result = NULL;

while (poly1 != NULL && poly2 != NULL) {
if (poly1->exponent > poly2->exponent) {
addToPolynomial(&result, poly1->coefficient, poly1->exponent);
poly1 = poly1->next;
} else if (poly1->exponent < poly2->exponent) {
addToPolynomial(&result, poly2->coefficient, poly2->exponent);
poly2 = poly2->next;
} else {
int sumCoef = poly1->coefficient + poly2->coefficient;
if (sumCoef != 0) {
addToPolynomial(&result, sumCoef, poly1->exponent);
}
poly1 = poly1->next;
poly2 = poly2->next;
}
}

while (poly1 != NULL) {
addToPolynomial(&result, poly1->coefficient, poly1->exponent);
poly1 = poly1->next;
}

while (poly2 != NULL) {
addToPolynomial(&result, poly2->coefficient, poly2->exponent);
poly2 = poly2->next;
}

return result;
}

// Function to display a polynomial
void displayPolynomial(Term* poly) {
if (poly == NULL) {
printf("0\n");
return;
}

while (poly != NULL) {
printf("%dx^%d", poly->coefficient, poly->exponent);
poly = poly->next;
if (poly != NULL) {
printf(" + ");
}
}
printf("\n");
}

int main() {
Term* poly1 = NULL;
Term* poly2 = NULL;

addToPolynomial(&poly1, 3, 2);
addToPolynomial(&poly1, 5, 1);
addToPolynomial(&poly1, 2, 0);

addToPolynomial(&poly2, 6, 2);
addToPolynomial(&poly2, -4, 1);
addToPolynomial(&poly2, 1, 0);

printf("Polynomial 1: ");
displayPolynomial(poly1);

printf("Polynomial 2: ");
displayPolynomial(poly2);

Term* result = addPolynomials(poly1, poly2);

printf("Sum of Polynomials: ");
displayPolynomial(result);

return 0;
}
2. MULTIPLICATION OF TWO POLYNOMIALS USING LINKED LIST
#include <stdio.h>
#include <stdlib.h>

typedef struct Term {
int coefficient;
int exponent;
struct Term* next;
} Term;

Term* createTerm(int coef, int exp) {
Term* term = (Term*)malloc(sizeof(Term));
term->coefficient = coef;
term->exponent = exp;
term->next = NULL;
return term;
}

void addToPolynomial(Term** poly, int coef, int exp) {
Term* newTerm = createTerm(coef, exp);

if (*poly == NULL) {
*poly = newTerm;
return;
}

Term* current = *poly;
while (current->next != NULL) {
current = current->next;
}
current->next = newTerm;
}

Term* multiplyPolynomials(Term* poly1, Term* poly2) {
if (poly1 == NULL || poly2 == NULL) {
return NULL;
}

Term* result = NULL;
Term* temp = poly2;

while (poly1 != NULL) {
poly2 = temp;

while (poly2 != NULL) {
int newCoef = poly1->coefficient * poly2->coefficient;
int newExp = poly1->exponent + poly2->exponent;

Term* term = result;
while (term != NULL && term->exponent > newExp) {
term = term->next;
}

if (term == NULL || term->exponent < newExp) {
addToPolynomial(&result, newCoef, newExp);
} else if (term->exponent == newExp) {
term->coefficient += newCoef;
}

poly2 = poly2->next;
}

poly1 = poly1->next;
}

return result;
}

void displayPolynomial(Term* poly) {
if (poly == NULL) {
printf("0\n");
return;
}

while (poly != NULL) {
printf("%dx^%d", poly->coefficient, poly->exponent);
poly = poly->next;
if (poly != NULL) {
printf(" + ");
}
}
printf("\n");
}

int main() {
Term* poly1 = NULL;
Term* poly2 = NULL;

addToPolynomial(&poly1, 3, 2);
addToPolynomial(&poly1, 5, 1);

addToPolynomial(&poly1, 2, 0);

addToPolynomial(&poly2, 2, 1);
addToPolynomial(&poly2, -1, 0);

printf("Polynomial 1: ");
displayPolynomial(poly1);

printf("Polynomial 2: ");
displayPolynomial(poly2);

Term* result = multiplyPolynomials(poly1, poly2);

printf("Product of Polynomials: ");
displayPolynomial(result);

return 0;
}
2. Implement the MergeSort algorithm to sort the sequence of integers stored in LinkedList.

#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the linked list
struct Node {
int data;
struct Node* next;
};

// Function to merge two sorted linked lists
struct Node* merge(struct Node* left, struct Node* right) {
struct Node* result = NULL;

// Base cases
if (left == NULL)
return right;
if (right == NULL)
return left;

// Compare the data of the two nodes and merge them
if (left->data <= right->data) {
result = left;
result->next = merge(left->next, right);
} else {
result = right;
result->next = merge(left, right->next);
}

return result;
}

// Split the linked list into two halves
void split(struct Node* source, struct Node** front, struct Node** back) {
struct Node* slow = source;
struct Node* fast = source->next;

// Advance 'fast' two nodes and 'slow' one node
while (fast != NULL) {
fast = fast->next;
if (fast != NULL) {
slow = slow->next;
fast = fast->next;
}
}

// 'slow' is before the midpoint, so split the list into two at that point.
*front = source;
*back = slow->next;
slow->next = NULL;
}

// MergeSort function for linked list
void mergeSort(struct Node** headRef) {
struct Node* head = *headRef;
struct Node* left;
struct Node* right;

// Base case: If the list is empty or has only one element, return.
if ((head == NULL) || (head->next == NULL)) {
return;

}

// Split the linked list into two halves
split(head, &left, &right);

// Recursively sort both halves
mergeSort(&left);
mergeSort(&right);

// Merge the sorted halves
*headRef = merge(left, right);
}

// Function to insert a new node at the beginning of the linked list
void push(struct Node** headRef, int newData) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = newData;
newNode->next = *headRef;
*headRef = newNode;
}

// Function to print the linked list
void printList(struct Node* node) {
while (node != NULL) {
printf("%d ", node->data);
node = node->next;
}
printf("\n");
}

int main() {
struct Node* head = NULL;

// Push elements onto the linked list
push(&head, 12);
push(&head, 11);
push(&head, 13);
push(&head, 5);
push(&head, 6);
push(&head, 7);

printf("Original linked list: \n");
printList(head);

// Sort the linked list using MergeSort
mergeSort(&head);

printf("Sorted linked list: \n");
printList(head);

return 0;
}
Implement the BST with the following individual functions.
1. Create new node
2. Insert a new node to the BST
3. Pre-order, In-order, and Post-order traversal
4. Search an element from BST
5. Find the smallest and largest element from BST
6. Find the height of the BST

#include <stdio.h>
#include <stdlib.h>

// Structure for a BST node
struct Node {
int data;
struct Node* left;
struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
newNode->left = newNode->right = NULL;
return newNode;
}

// Function to insert a new node into the BST
struct Node* insert(struct Node* root, int data) {
if (root == NULL) {

return createNode(data);
}

if (data < root->data) {
root->left = insert(root->left, data);
} else if (data > root->data) {
root->right = insert(root->right, data);
}

return root;
}

// Function for pre-order traversal
void preorderTraversal(struct Node* root) {
if (root != NULL) {
printf("%d ", root->data);
preorderTraversal(root->left);
preorderTraversal(root->right);
}
}

// Function for in-order traversal
void inorderTraversal(struct Node* root) {
if (root != NULL) {
inorderTraversal(root->left);
printf("%d ", root->data);
inorderTraversal(root->right);
}
}

// Function for post-order traversal
void postorderTraversal(struct Node* root) {
if (root != NULL) {
postorderTraversal(root->left);
postorderTraversal(root->right);
printf("%d ", root->data);
}
}

// Function to search for an element in the BST
struct Node* search(struct Node* root, int key) {
if (root == NULL || root->data == key) {
return root;
}

if (key < root->data) {
return search(root->left, key);
}

return search(root->right, key);
}

// Function to find the smallest element in the BST
struct Node* findMin(struct Node* root) {
while (root->left != NULL) {
root = root->left;
}
return root;
}

// Function to find the largest element in the BST
struct Node* findMax(struct Node* root) {
while (root->right != NULL) {
root = root->right;
}
return root;
}

// Function to find the height of the BST
int findHeight(struct Node* root) {
if (root == NULL) {
return -1;
}

int leftHeight = findHeight(root->left);
int rightHeight = findHeight(root->right);

return (leftHeight > rightHeight ? leftHeight : rightHeight) + 1;
}

int main() {
struct Node* root = NULL;
root = insert(root, 50);
insert(root, 30);
insert(root, 20);
insert(root, 40);
insert(root, 70);
insert(root, 60);
insert(root, 80);

printf("Pre-order traversal: ");
preorderTraversal(root);
printf("\n");

printf("In-order traversal: ");
inorderTraversal(root);
printf("\n");

printf("Post-order traversal: ");
postorderTraversal(root);
printf("\n");

int searchValue = 40;
struct Node* result = search(root, searchValue);
if (result != NULL) {
printf("%d found in the BST.\n", searchValue);
} else {
printf("%d not found in the BST.\n", searchValue);
}

struct Node* smallest = findMin(root);
struct Node* largest = findMax(root);
printf("Smallest element: %d\n", smallest->data);
printf("Largest element: %d\n", largest->data);

int height = findHeight(root);
printf("Height of the BST: %d\n", height);

return 0;
}
