2. ROTATE 1D ARRAY
#include <stdio.h>

// Function to rotate a 1D array to the left by 'positions' positions
void rotateLeft(int arr[], int size, int positions) {
for (int i = 0; i < positions; i++) {
int temp = arr[0];
for (int j = 0; j < size - 1; j++) {
arr[j] = arr[j + 1];
}
arr[size - 1] = temp;

}
}

// Function to print an array
void printArray(int arr[], int size) {
for (int i = 0; i < size; i++) {
printf("%d ", arr[i]);
}
printf("\n");
}

int main() {
int arr[] = {1, 2, 3, 4, 5};
int size = sizeof(arr) / sizeof(arr[0]);
int positions = 2; // Number of positions to rotate by

printf("Original array: ");
printArray(arr, size);

rotateLeft(arr, size, positions);

printf("Rotated array: ");
printArray(arr, size);

return 0;
}
3. ROTATE 2D ARRAY
#include <stdio.h>

// Function to transpose a square matrix (2D array)
void transpose(int arr[][3], int size) {
for (int i = 0; i < size; i++) {
for (int j = i + 1; j < size; j++) {
int temp = arr[i][j];
arr[i][j] = arr[j][i];
arr[j][i] = temp;
}
}
}

// Function to reverse the rows of a matrix (2D array)
void reverseRows(int arr[][3], int size) {
for (int i = 0; i < size; i++) {
for (int j = 0; j < size / 2; j++) {
int temp = arr[i][j];
arr[i][j] = arr[i][size - j - 1];
arr[i][size - j - 1] = temp;
}
}
}

// Function to print a matrix (2D array)
void printMatrix(int arr[][3], int size) {
for (int i = 0; i < size; i++) {
for (int j = 0; j < size; j++) {
printf("%d ", arr[i][j]);
}
printf("\n");

}
}

int main() {
int matrix[3][3] = {
{1, 2, 3},
{4, 5, 6},
{7, 8, 9}
};
int size = 3;

printf("Original matrix:\n");
printMatrix(matrix, size);

// Rotate the matrix clockwise by 90 degrees
transpose(matrix, size);
reverseRows(matrix, size);

printf("Rotated matrix:\n");
printMatrix(matrix, size);

return 0;
  }
1.
#include <stdio.h>
#include <stdlib.h>

// Function to check if there exist two integers whose sum is X
int hasPairWithSum(int arr[], int n, int X) {
// Sort the array in ascending order
qsort(arr, n, sizeof(int), cmp);

// Initialize pointers
int left = 0;
int right = n - 1;

// Check for pairs
while (left < right) {
int sum = arr[left] + arr[right];
if (sum == X) {
return 1; // Pair found
} else if (sum < X) {
left++;
} else {
right--;
}
}

return 0; // No pair found
}

// Comparison function for qsort
int cmp(const void *a, const void *b) {
return (*(int *)a - *(int *)b);
}

int main() {
int arr[] = {1, 4, 6, 8, 10};
int n = sizeof(arr) / sizeof(arr[0]);
int X = 10;

if (hasPairWithSum(arr, n, X)) {
printf("There exist two integers whose sum is %d.\n", X);
} else {
printf("No such pair found.\n");
}

return 0;
}
2.
#include <stdio.h>
#include <stdlib.h>

long long mergeAndCount(int arr[], int temp[], int left, int mid, int right) {
int i = left;
int j = mid + 1;
int k = left;
long long inversionCount = 0;

while (i <= mid && j <= right) {
if (arr[i] <= arr[j]) {
temp[k++] = arr[i++];
} else {
// An inversion is found
temp[k++] = arr[j++];
inversionCount += (mid - i + 1);
}
}

while (i <= mid) {
temp[k++] = arr[i++];
}

while (j <= right) {
temp[k++] = arr[j++];
}

for (i = left; i <= right; i++) {
arr[i] = temp[i];
}

return inversionCount;
}

long long mergeSortAndCount(int arr[], int temp[], int left, int right) {
long long inversionCount = 0;
if (left < right) {
int mid = left + (right - left) / 2;

// Count inversions in the left and right subarrays
inversionCount += mergeSortAndCount(arr, temp, left, mid);
inversionCount += mergeSortAndCount(arr, temp, mid + 1, right);

// Count inversions while merging the subarrays
inversionCount += mergeAndCount(arr, temp, left, mid, right);
}
return inversionCount;
}

long long countInversions(int arr[], int n) {
int* temp = (int*)malloc(sizeof(int) * n);
long long inversionCount = mergeSortAndCount(arr, temp, 0, n - 1);
free(temp);
return inversionCount;
}

int main() {
int arr[] = {8, 4, 2, 1};
int n = sizeof(arr) / sizeof(arr[0]);

long long inversions = countInversions(arr, n);

printf("Number of inversions: %lld\n", inversions);

return 0;
}
#include <stdio.h>
#include <stdlib.h>

// Define a structure to represent elements in the k-way merge
struct HeapNode {
int value;
int arrayIndex;
int elementIndex;
};

// Function to swap two HeapNode elements
void swap(struct HeapNode* x, struct HeapNode* y) {
struct HeapNode temp = *x;
*x = *y;
*y = temp;
}

// Min-heapify function to maintain the heap property
void minHeapify(struct HeapNode arr[], int size, int index) {
int smallest = index;
int leftChild = 2 * index + 1;
int rightChild = 2 * index + 2;

if (leftChild < size && arr[leftChild].value < arr[smallest].value)
smallest = leftChild;

if (rightChild < size && arr[rightChild].value < arr[smallest].value)
smallest = rightChild;

if (smallest != index) {
swap(&arr[index], &arr[smallest]);
minHeapify(arr, size, smallest);
}
}

// Build a min-heap from the given array
void buildMinHeap(struct HeapNode arr[], int size) {
int i = (size - 1) / 2;
for (; i >= 0; i--) {
minHeapify(arr, size, i);
}
}

// Perform k-way merging of sorted arrays
int* kWayMerge(int* arrays[], int k, int sizes[]) {
int totalElements = 0;
for (int i = 0; i < k; i++) {
totalElements += sizes[i];
}

// Create a min-heap of size k to store the first element from each array
struct HeapNode heap[k];
for (int i = 0; i < k; i++) {
heap[i].value = arrays[i][0];
heap[i].arrayIndex = i;
heap[i].elementIndex = 0;

}

// Build the initial min-heap
buildMinHeap(heap, k);

// Create the result array
int* result = (int*)malloc(sizeof(int) * totalElements);
int resultIndex = 0;

// Merge the arrays until the min-heap is empty
while (resultIndex < totalElements) {
struct HeapNode minNode = heap[0];
result[resultIndex++] = minNode.value;

// Replace the root of the min-heap with the next element from the same array
int nextElementIndex = minNode.elementIndex + 1;
if (nextElementIndex < sizes[minNode.arrayIndex]) {
heap[0].value = arrays[minNode.arrayIndex][nextElementIndex];
heap[0].elementIndex = nextElementIndex;
} else {
// If the array is exhausted, replace it with a large value
heap[0].value = INT_MAX;
}

minHeapify(heap, k, 0);
}

return result;
}

int main() {
int k = 3; // Number of sorted arrays
int sizes[] = {4, 3, 5}; // Sizes of the sorted arrays

// Input sorted arrays
int* arrays[3];
arrays[0] = (int[]){1, 3, 5, 7};
arrays[1] = (int[]){2, 4, 6};
arrays[2] = (int[]){0, 8, 9, 10, 11};

int* mergedArray = kWayMerge(arrays, k, sizes);

// Print the merged array
for (int i = 0; i < sizes[0] + sizes[1] + sizes[2]; i++) {
printf("%d ", mergedArray[i]);
}

free(mergedArray); // Free the dynamically allocated memory

return 0;
}
